const { Markup, Scenes, Composer } = require('telegraf');
const { createZodiacSignsKeyboard } = require('../helpers/zodiacSignsKeyboard.js');
const { ZodiacSign, ZodiacCompatibility } = require('../../../models/index.js');
const UserModel = require('../../model/user.model.js');
// const checkUserSubscription = require('../helpers/subscriptionChecker');
// const { promptSubscription } = require('../helpers/promptSubscription.js');
const { handleSubscription } = require('../helpers/sceneSubscription.js');


const chooseWomanSignStep = new Composer();

// chooseWomanSignStep.use(async (ctx, next) => {
//   const chatID = ctx.from.id;
//   const isSubscribed = await checkUserSubscription(ctx, '@nebo_prognoz');

//   if (!isSubscribed) {
//     await UserModel.update({ subscribeneboprognoz: false }, { where: { chatID } });
//     await promptSubscription(ctx);
//   } else {
//     await UserModel.update({ subscribeneboprognoz: true }, { where: { chatID } });
//     await enterWomanSignStep(ctx);
//   }
// });

// chooseWomanSignStep.use(async (ctx, next) => {
//   const chatID = ctx.from.id;
//   const user = await UserModel.findOne({ where: { chatID } });

//   // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
//   if (
//     user.subscribeneboprognoz === false &&
//     ctx.wizard.state.initialSubscribeStatus === undefined
//   ) {
//     ctx.wizard.state.initialSubscribeStatus = 'unsubscribed';
//   }

//   const isSubscribed = await checkUserSubscription(ctx, '@nebo_prognoz');

//   if (!isSubscribed) {
//     await UserModel.update({ subscribeneboprognoz: false }, { where: { chatID } });
//     await promptSubscription(ctx);
//   } else {
//     await UserModel.update({ subscribeneboprognoz: true }, { where: { chatID } });
//     // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–Ω–µ–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º
//     if (ctx.wizard.state.initialSubscribeStatus === 'unsubscribed') {
//       // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –∫–∞–Ω–∞–ª
//       await UserModel.increment('channeljoincount', { by: 1, where: { chatID } });
//       // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ wizard
//       ctx.wizard.state.initialSubscribeStatus = 'subscribed';
//     }
//     await enterWomanSignStep(ctx);
//   }
// });
chooseWomanSignStep.use(async (ctx, next) => {
  await handleSubscription(ctx, enterWomanSignStep);
});

async function enterWomanSignStep(ctx) {
  try {
    ctx.wizard.state.formData = {};
    await ctx.replyWithHTML(`<b>üíÉ –í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ –ñ–µ–Ω—â–∏–Ω—ã</b>`, {
      reply_markup: createZodiacSignsKeyboard(),
    });
    return ctx.wizard.next();
  } catch (e) {
    console.log(e);
  }
}

const chooseManSignStep = new Composer();
chooseManSignStep.action(/^\d{1,2}$/, async (ctx) => {
  const zodiacSignId = ctx.match[0];
  ctx.wizard.state.formData.womanZodiacSign = zodiacSignId;
  try {
    const zodiacSign = await ZodiacSign.findByPk(zodiacSignId);
    if (zodiacSign) {
      await ctx.reply(`–í—ã –≤—ã–±—Ä–∞–ª–∏ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ –ñ–µ–Ω—â–∏–Ω—ã - ${zodiacSign.emoji} ${zodiacSign.name}`);
    } else {
      await ctx.reply('–ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', error);
  }
  await ctx.replyWithHTML(`<b>üë®‚Äçü¶≥ –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ –ú—É–∂—á–∏–Ω—ã</b>`, {
    reply_markup: createZodiacSignsKeyboard(),
  });
  return ctx.wizard.next();
});

const compatibilityCalcStep = new Composer();
compatibilityCalcStep.action(/^\d{1,2}$/, async (ctx) => {
  const zodiacWomanSignId = ctx.wizard.state.formData.womanZodiacSign;
  const zodiacManSignId = ctx.match[0];
  ctx.wizard.state.formData.manZodiacSign = zodiacManSignId;
  let zodiacWomanSign, zodiacManSign;

  try {
    zodiacManSign = await ZodiacSign.findByPk(zodiacManSignId);
    if (!zodiacManSign) {
      await ctx.reply('–ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ –ú—É–∂—á–∏–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω');
    } else {
      await ctx.reply(
        `–í—ã –≤—ã–±—Ä–∞–ª–∏ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ –ú—É–∂—á–∏–Ω—ã - ${zodiacManSign.emoji} ${zodiacManSign.name}`
      );
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', error);
  }

  try {
    zodiacWomanSign = await ZodiacSign.findByPk(zodiacWomanSignId);
    if (!zodiacWomanSign) {
      await ctx.reply('–ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ –ñ–µ–Ω—â–∏–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', error);
  }

  if (zodiacWomanSign && zodiacManSign) {
    await ctx.replyWithHTML(
      `–¢–µ–ø–µ—Ä—å –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å:\n\n–ñ–µ–Ω—â–∏–Ω–∞ - ${zodiacWomanSign.name} ${zodiacWomanSign.emoji} + ${zodiacManSign.emoji} ${zodiacManSign.name} - –ú—É–∂—á–∏–Ω–∞`,
      Markup.inlineKeyboard([
        Markup.button.callback('–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å', 'calculate_compatibility'),
      ])
    );
  }

  return ctx.wizard.next();
});

const finishStep = new Composer();
finishStep.action('calculate_compatibility', async (ctx) => {
  try {
    await ctx.answerCbQuery();
    const zodiacWomanSignId = ctx.wizard.state.formData.womanZodiacSign;
    const zodiacManSignId = ctx.wizard.state.formData.manZodiacSign;
    const chatID = ctx.update.callback_query.from.id; // –ü–æ–ª—É—á–µ–Ω–∏–µ chatID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    // –ó–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    const compatibility = await ZodiacCompatibility.findOne({
      where: {
        woman_zodiac_sign: zodiacWomanSignId,
        man_zodiac_sign: zodiacManSignId,
      },
    });

    if (compatibility) {
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      const message = `
        <b>–ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏:</b> ${compatibility.compatibility_percent}%\n
        <i>${compatibility.compatibility_description}</i>
      `;
      await ctx.replyWithHTML(message);
    } else {
      await ctx.reply('–î–∞–Ω–Ω—ã–µ –æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }

    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ä–∞—Å—á–µ—Ç–æ–≤ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await UserModel.increment('compatibilityCalculationsCount', { by: 1, where: { chatID } });

    return ctx.scene.leave();
  } catch (e) {
    console.error(e);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏');
  }
});

module.exports = new Scenes.WizardScene(
  'oneWizard',
  chooseWomanSignStep,
  chooseManSignStep,
  compatibilityCalcStep,
  finishStep
);
