const { Markup, Scenes, Composer } = require('telegraf');
const { createZodiacSignsKeyboard } = require('../helpers/zodiacSignsKeyboard.js');
const {
  ZodiacSign,
  ZodiacCompatibility,
  NumerologyCompatibilityDescription,
} = require('../../../models/index.js');
const UserModel = require('../../model/user.model.js');
const { handleSubscription } = require('../helpers/sceneSubscription.js');
const { isValidDate } = require('../helpers/isValidDate.js');

const startStep = new Composer();

startStep.use(async (ctx, next) => {
  await handleSubscription(ctx, enterStartStep);
});

async function enterStartStep(ctx) {
  try {
    ctx.wizard.state.formData = {};
    await ctx.replyWithHTML(
      `<b>üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏! üåü</b>

–ú—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ –¥–ª—è –≤–∞—Å 2 –≤–∏–¥–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏:

‚ôàÔ∏è<b><i>–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø–æ –∑–Ω–∞–∫—É –∑–æ–¥–∏–∞–∫–∞</i></b>

üë©‚Äç‚ù§Ô∏è‚Äçüë®<b><i>–ù—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—Ç—Ä–µ—Ç –ø–∞—Ä—ã –ø–æ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è</i></b>

<b>–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å</b> üëá`,
      {
        reply_markup: {
          inline_keyboard: [
            [Markup.button.callback('–ü–æ –∑–Ω–∞–∫–∞–º –∑–æ–¥–∏–∞–∫–∞', 'compatibility_zodiac')],
            [Markup.button.callback('–ù—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—Ç—Ä–µ—Ç –ø–∞—Ä—ã', 'compatibility_numerology')],
          ],
        },
      }
    );
    return ctx.wizard.next();
  } catch (e) {
    console.log(e);
  }
}

const typeSelectionStep = new Composer();

typeSelectionStep.action('compatibility_zodiac', async (ctx) => {
  try {
    ctx.wizard.state.formData = {};
    await ctx.replyWithHTML(`<b>üíÉ –í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ –ñ–µ–Ω—â–∏–Ω—ã</b>`, {
      reply_markup: createZodiacSignsKeyboard(),
    });
    return ctx.wizard.next();
  } catch (e) {
    console.log(e);
  }
});

const chooseManSignStep = new Composer();
chooseManSignStep.action(/^\d{1,2}$/, async (ctx) => {
  const zodiacSignId = ctx.match[0];
  ctx.wizard.state.formData.womanZodiacSign = zodiacSignId;
  try {
    const zodiacSign = await ZodiacSign.findByPk(zodiacSignId);
    if (zodiacSign) {
      await ctx.reply(`–í—ã –≤—ã–±—Ä–∞–ª–∏ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ –ñ–µ–Ω—â–∏–Ω—ã - ${zodiacSign.emoji} ${zodiacSign.name}`);
    } else {
      await ctx.reply('–ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', error);
  }
  await ctx.replyWithHTML(`<b>üë®‚Äçü¶≥ –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ –ú—É–∂—á–∏–Ω—ã</b>`, {
    reply_markup: createZodiacSignsKeyboard(),
  });
  return ctx.wizard.next();
});

const compatibilityCalcStep = new Composer();
compatibilityCalcStep.action(/^\d{1,2}$/, async (ctx) => {
  const zodiacWomanSignId = ctx.wizard.state.formData.womanZodiacSign;
  const zodiacManSignId = ctx.match[0];
  ctx.wizard.state.formData.manZodiacSign = zodiacManSignId;
  let zodiacWomanSign, zodiacManSign;

  try {
    zodiacManSign = await ZodiacSign.findByPk(zodiacManSignId);
    if (!zodiacManSign) {
      await ctx.reply('–ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ –ú—É–∂—á–∏–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω');
    } else {
      await ctx.reply(
        `–í—ã –≤—ã–±—Ä–∞–ª–∏ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ –ú—É–∂—á–∏–Ω—ã - ${zodiacManSign.emoji} ${zodiacManSign.name}`
      );
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', error);
  }

  try {
    zodiacWomanSign = await ZodiacSign.findByPk(zodiacWomanSignId);
    if (!zodiacWomanSign) {
      await ctx.reply('–ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ –ñ–µ–Ω—â–∏–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', error);
  }

  if (zodiacWomanSign && zodiacManSign) {
    await ctx.replyWithHTML(
      `–¢–µ–ø–µ—Ä—å –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å:\n\n–ñ–µ–Ω—â–∏–Ω–∞ - ${zodiacWomanSign.name} ${zodiacWomanSign.emoji} + ${zodiacManSign.emoji} ${zodiacManSign.name} - –ú—É–∂—á–∏–Ω–∞`,
      Markup.inlineKeyboard([
        Markup.button.callback('–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å', 'calculate_compatibility'),
      ])
    );
  }

  return ctx.wizard.next();
});

const finishStep = new Composer();
finishStep.action('calculate_compatibility', async (ctx) => {
  try {
    await ctx.answerCbQuery();
    const zodiacWomanSignId = ctx.wizard.state.formData.womanZodiacSign;
    const zodiacManSignId = ctx.wizard.state.formData.manZodiacSign;
    const chatID = ctx.update.callback_query.from.id; // –ü–æ–ª—É—á–µ–Ω–∏–µ chatID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    const compatibility = await ZodiacCompatibility.findOne({
      where: {
        woman_zodiac_sign: zodiacWomanSignId,
        man_zodiac_sign: zodiacManSignId,
      },
    });

    if (compatibility) {
      const message = `
        <b>–ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏:</b> ${compatibility.compatibility_percent}%\n
        <i>${compatibility.compatibility_description}</i>
      `;
      await ctx.replyWithHTML(message);
    } else {
      await ctx.reply('–î–∞–Ω–Ω—ã–µ –æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }

    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ä–∞—Å—á–µ—Ç–æ–≤ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await UserModel.increment('compatibilityCalculationsCount', { by: 1, where: { chatID } });

    return ctx.scene.leave();
  } catch (e) {
    console.error(e);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏');
  }
});

typeSelectionStep.action('compatibility_numerology', async (ctx) => {
  try {
    ctx.wizard.state.formData = {
      type: 'numerology',
    };
    await ctx.replyWithHTML(
      `üë©‚Äç‚ù§Ô∏è‚Äçüë® –ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –í–∞–º —É–∑–Ω–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—Ç—Ä–µ—Ç –í–∞—à–µ–π –ø–∞—Ä—ã. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ä—Ç–Ω—ë—Ä—Å—Ç–≤–∞ –µ—Å—Ç—å —Å–≤–æ—ë —á–∏—Å–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç—Ä–∞–∂–∞–µ—Ç –≤—Å—é —Å—É—Ç—å –æ—Ç–Ω–æ—à–µ–Ω–∏–π.

üìÖ<b>–î–ª—è —Ä–∞—Å—á—ë—Ç–∞ –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–Ω–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ–ª–Ω—É—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è.</b>

–ß—Ç–æ–±—ã —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å, –Ω–∞–¥–æ —Å—É–º–º–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Ü–∏—Ñ—Ä—ã –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤, –ø–æ–∫–∞ —É –í–∞—Å –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 9. 
<blockquote>–ù–∞–ø—Ä–∏–º–µ—Ä, 10 —è–Ω–≤–∞—Ä—è 1970 –≥–æ–¥–∞ ‚Äì –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –º—É–∂—á–∏–Ω—ã, 26 —Å–µ–Ω—Ç—è–±—Ä—è 1976 –≥–æ–¥–∞ ‚Äì –∂–µ–Ω—â–∏–Ω—ã. –°–∫–ª–∞–¥—ã–≤–∞–µ–º —Ü–∏—Ñ—Ä—ã: 1+1+1+9+7=19=10=1 (—ç—Ç–æ –µ–≥–æ —Ü–∏—Ñ—Ä–∞) –∏ 2+6+9+1+9+7+6=40=4 (—ç—Ç–æ –µ—ë —Ü–∏—Ñ—Ä–∞). –ß–∏—Å–ª–æ –ø–∞—Ä—ã –≤ —Å—É–º–º–µ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 5.</blockquote>

<b>–í –Ω–∞—à–µ–º –±–æ—Ç–µ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å –µ—â–µ –ø—Ä–æ—â–µ, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–≤–µ—Å—Ç–∏ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è. –ú—ã —Ä–∞—Å—Å—á–∏—Ç–∞–µ–º —á–∏—Å–ª–æ –≤–∞—à–µ–π –ø–∞—Ä—ã –∏ –¥–∞–¥–∏–º –µ–≥–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É.</b>üëáüëáüëá
`
    );

    await ctx.reply('üë®‚Äçü¶∞–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –º—É–∂—á–∏–Ω—ã (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì):');
    return ctx.wizard.selectStep(5);
  } catch (e) {
    console.log(e);
  }
});

const enterManBirthdateStep = new Composer();

enterManBirthdateStep.on('text', async (ctx) => {
  const inputText = ctx.message.text;

  switch (inputText) {
    case '–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å':
      return ctx.scene.enter('oneWizard');

    case '/compatibility':
      return ctx.scene.enter('oneWizard');

    case '–†–∞—Å–∫–ª–∞–¥ –¢–ê–†–û':
      return ctx.scene.enter('twoWizard');

    case '/taro':
      return ctx.scene.enter('twoWizard');

    case '–ì–æ—Ä–æ—Å–∫–æ–ø—ã':
      return ctx.scene.enter('threeWizard');

    case '/horoscope':
      return ctx.scene.enter('threeWizard');

    case '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä':
      return ctx.scene.enter('adminWizard');

    case '/start':
      await ctx.scene.leave();
      return await ctx.replyWithHTML(
        `–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞–∑–¥–µ–ª–∞.
–í—ã–±–∏—Ä–∞–π—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ <b>–ú–ï–ù–Æ</b> üëáüëáüëá`
      );

    default:
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞—Ç—ã
      if (!isValidDate(inputText)) {
        await ctx.reply('–î–∞—Ç–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì):');
        return; // –û—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —ç—Ç–æ–º –∂–µ —à–∞–≥–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞
      }

      // –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞–∫ –≤–∞–ª–∏–¥–Ω–∞—è –¥–∞—Ç–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π
      ctx.wizard.state.formData.manBirthdate = inputText;
      await ctx.reply('üë©–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –∂–µ–Ω—â–∏–Ω—ã (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì):');
      return ctx.wizard.next();
  }
});

const enterWomanBirthdateStep = new Composer();

// enterWomanBirthdateStep.on('text', async (ctx) => {
//   const inputDate = ctx.message.text;

//   if (inputDate === '–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å') {
//     return ctx.scene.enter('oneWizard');
//   }

//   if (!isValidDate(inputDate)) {
//     await ctx.reply('–î–∞—Ç–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì):');
//     return;
//   }

//   ctx.wizard.state.formData.womanBirthdate = inputDate;
//   await ctx.reply(
//     '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏',
//     Markup.inlineKeyboard([
//       Markup.button.callback('–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å', 'calculate_numerology'),
//     ])
//   );
//   return ctx.wizard.next();
// });

enterWomanBirthdateStep.on('text', async (ctx) => {
  const inputText = ctx.message.text;

  switch (inputText) {
    case '–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å':
      return ctx.scene.enter('oneWizard');

    case '/compatibility':
      return ctx.scene.enter('oneWizard');

    case '–†–∞—Å–∫–ª–∞–¥ –¢–ê–†–û':
      return ctx.scene.enter('twoWizard');

    case '/taro':
      return ctx.scene.enter('twoWizard');

    case '–ì–æ—Ä–æ—Å–∫–æ–ø—ã':
      return ctx.scene.enter('threeWizard');

    case '/horoscope':
      return ctx.scene.enter('threeWizard');

    case '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä':
      return ctx.scene.enter('adminWizard');

    case '/start':
      await ctx.scene.leave();
      return await ctx.replyWithHTML(
        `–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞–∑–¥–µ–ª–∞.
–í—ã–±–∏—Ä–∞–π—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ <b>–ú–ï–ù–Æ</b> üëáüëáüëá`
      );

    default:
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞—Ç—ã
      if (!isValidDate(inputText)) {
        await ctx.reply('–î–∞—Ç–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì):');
        return; // –û—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —ç—Ç–æ–º –∂–µ —à–∞–≥–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞
      }

      // –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞–∫ –≤–∞–ª–∏–¥–Ω–∞—è –¥–∞—Ç–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π
      ctx.wizard.state.formData.womanBirthdate = inputText;
      await ctx.reply(
        '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏',
        Markup.inlineKeyboard([
          Markup.button.callback('–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å', 'calculate_numerology'),
        ])
      );
      return ctx.wizard.next();
  }
});

const calculateCompatibilityStep = new Composer();

function calculateNumerologyNumber(dateString) {
  const sum = dateString.split('').reduce((acc, char) => {
    return char >= '0' && char <= '9' ? acc + parseInt(char, 10) : acc;
  }, 0);

  return sum > 9 ? calculateNumerologyNumber(sum.toString()) : sum;
}

calculateCompatibilityStep.action('calculate_numerology', async (ctx) => {
  try {
    await ctx.answerCbQuery();
    const chatID = ctx.update.callback_query.from.id; // –ü–æ–ª—É—á–µ–Ω–∏–µ chatID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const manBirthdate = ctx.wizard.state.formData.manBirthdate;
    const womanBirthdate = ctx.wizard.state.formData.womanBirthdate;

    const manNumber = calculateNumerologyNumber(manBirthdate);
    const womanNumber = calculateNumerologyNumber(womanBirthdate);
    const compatibilityNumber = calculateNumerologyNumber(`${manNumber + womanNumber}`);

    const compatibility = await NumerologyCompatibilityDescription.findOne({
      where: { number: compatibilityNumber },
    });

    const description = compatibility ? compatibility.description : '–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞';

    await ctx.replyWithHTML(`<b>–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏:</b>\n${description}`);

    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ä–∞—Å—á–µ—Ç–æ–≤ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await UserModel.increment('compatibilityCalculationsCount', { by: 1, where: { chatID } });

    return ctx.scene.leave();
  } catch (e) {
    console.error(e);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏');
  }
});

module.exports = new Scenes.WizardScene(
  'oneWizard',
  startStep,
  typeSelectionStep,
  chooseManSignStep,
  compatibilityCalcStep,
  finishStep,
  enterManBirthdateStep,
  enterWomanBirthdateStep,
  calculateCompatibilityStep
);
