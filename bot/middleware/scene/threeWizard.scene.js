const { Markup, Scenes, Composer } = require('telegraf');
const { createZodiacSignsKeyboard } = require('../helpers/zodiacSignsKeyboard.js');
const { getZodiacSignInGenitive } = require('../helpers/zodiacSignInGenitive.js');
const { getHoroscope } = require('../helpers/getHoroscope.js');
const { ZodiacSign, HoroscopeCurWeek, HoroscopePrevWeek } = require('../../../models/index.js');
const UserModel = require('../../model/user.model.js');
const { handleSubscription } = require('../helpers/sceneSubscription.js');

async function getDateRangeForZodiacSign(ZodiacSignId, Model) {
  try {
    const record = await Model.findOne({
      where: { zodiac_sign_id: ZodiacSignId },
      attributes: ['date_range'],
    });
    return record ? record.date_range : null;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç:', error);
    return null;
  }
}

const startStep = new Composer();

startStep.use(async (ctx, next) => {
  await handleSubscription(ctx, enterStartStep);
});

async function enterStartStep(ctx) {
  try {
    ctx.wizard.state.formData = {};
    await ctx.replyWithHTML(
      `<b>üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª –ì–æ—Ä–æ—Å–∫–æ–ø–æ–≤! üåü</b>

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å, —á—Ç–æ –∑–≤—ë–∑–¥—ã –≥–æ—Ç–æ–≤—è—Ç –¥–ª—è –≤–∞—Å –Ω–∞ –ø—Ä–µ–¥—Å—Ç–æ—è—â—É—é –Ω–µ–¥–µ–ª—é –∏ –≤–µ—Å—å –≥–æ–¥. –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:
      
<b>üîÆ –ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ –Ω–µ–¥–µ–ª—é</b> - –ø–æ–ª—É—á–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Å–µ–º—å –¥–Ω–µ–π:
      ‚ú® <b><i>–û–±—â–∏–π –≥–æ—Ä–æ—Å–∫–æ–ø</i></b>
      ‚ù§Ô∏è <b><i>–õ—é–±–æ–≤–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø</i></b>
      üí∞ <b><i>–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø</i></b>
      üçè <b><i>–ì–æ—Ä–æ—Å–∫–æ–ø –∑–¥–æ—Ä–æ–≤—å—è</i></b>
      üíÑ <b><i>–ì–æ—Ä–æ—Å–∫–æ–ø –∫—Ä–∞—Å–æ—Ç—ã</i></b>
      
<b>üåå –ì–æ–¥–æ–≤–æ–π –≥–æ—Ä–æ—Å–∫–æ–ø</b> - —É–∑–Ω–∞–π—Ç–µ, —á—Ç–æ –æ–∂–∏–¥–∞–µ—Ç –≤–∞—Å –≤ —Ç–µ—á–µ–Ω–∏–µ –≤—Å–µ–≥–æ –≥–æ–¥–∞.
      
<b>–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å</b> üëá`,
      {
        reply_markup: {
          inline_keyboard: [
            [Markup.button.callback('–ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ –ù–ï–î–ï–õ–Æ', 'horoWeek')],
            [Markup.button.callback('–ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ 2024 –≥–æ–¥', 'horo24')],
          ],
        },
      }
    );
    return ctx.wizard.next();
  } catch (e) {
    console.log(e);
  }
}

const typeSelectionStep = new Composer();

typeSelectionStep.action('horoWeek', async (ctx) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–π –∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –Ω–µ–¥–µ–ª–∏
    const curWeekDateRange = await getDateRangeForZodiacSign(1, HoroscopeCurWeek);
    const prevWeekDateRange = await getDateRangeForZodiacSign(1, HoroscopePrevWeek);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ª—É—á–∏–ª–∏ –ª–∏ –º—ã –¥–∏–∞–ø–∞–∑–æ–Ω—ã –¥–∞—Ç
    if (!curWeekDateRange || !prevWeekDateRange) {
      await ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞—Ö –¥–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
      return;
    }

    ctx.wizard.state.dateRanges = {
      curWeek: curWeekDateRange,
      prevWeek: prevWeekDateRange,
    };

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω—ã –¥–∞—Ç –≤ –Ω–∞–∑–≤–∞–Ω–∏—è—Ö –∫–Ω–æ–ø–æ–∫
    await ctx.replyWithHTML(
      `üëá –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é üëá`,
      Markup.inlineKeyboard([
        Markup.button.callback(`${prevWeekDateRange}`, 'prevWeek'),
        Markup.button.callback(`${curWeekDateRange}`, 'curWeek'),
      ])
    );
    return ctx.wizard.selectStep(2);
    // return ctx.wizard.next();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.');
  }
});

typeSelectionStep.action('horo24', async (ctx) => {
  try {
    await ctx.reply(
      '–í—ã–±–µ—Ä–∏—Ç–µ, –¥–ª—è –∫–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ 2024 –≥–æ–¥',
      Markup.inlineKeyboard([
        Markup.button.callback('–ú—É–∂—á–∏–Ω–∞', '–º—É–∂'),
        Markup.button.callback('–ñ–µ–Ω—â–∏–Ω–∞', '–∂–µ–Ω'),
      ])
    );
    return ctx.wizard.selectStep(5);
    // return ctx.wizard.next();
  } catch (e) {
    console.log(e);
  }
});

const zodiacWeekSelectionStep = new Composer();

zodiacWeekSelectionStep.action(['prevWeek', 'curWeek'], async (ctx) => {
  ctx.wizard.state.selectedWeek = ctx.match[0];

  await ctx.reply('–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞', {
    reply_markup: createZodiacSignsKeyboard(),
  });
  return ctx.wizard.next();
});

const horoscopeTypeSelectionStep = new Composer();

horoscopeTypeSelectionStep.action(/(\d+)/, async (ctx) => {
  try {
    const zodiacSignId = parseInt(ctx.match[1], 10);
    const zodiacSign = await ZodiacSign.findByPk(zodiacSignId);
    ctx.wizard.state.selectedZodiacSign = zodiacSign;
    const selectedWeek = ctx.wizard.state.selectedWeek;
    const dateRange = ctx.wizard.state.dateRanges[selectedWeek];
    await ctx.reply(
      `–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ –≥–æ—Ä–æ—Å–∫–æ–ø–∞ –Ω–∞ ${dateRange} –¥–ª—è –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞ - ${zodiacSign.name} ${
        zodiacSign.emoji || ''
      }:`,

      Markup.inlineKeyboard([
        [
          Markup.button.callback('‚ù§Ô∏è–õ—é–±–æ–≤–Ω—ã–π', 'love'),
          Markup.button.callback('üí∞–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π', 'business'),
        ],
        [
          Markup.button.callback('üçè–ó–¥–æ—Ä–æ–≤—å–µ', 'health'),
          Markup.button.callback('üíÑ–ö—Ä–∞—Å–æ—Ç–∞', 'beauty'),
        ],
        [Markup.button.callback('‚ú®–û–±—â–∏–π', 'common')],
        // –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
      ])
    );
    return ctx.wizard.next();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.');
  }
});

const horoscopeTypes = {
  love: '–õ—é–±–æ–≤–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø',
  business: '–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø',
  health: '–ì–æ—Ä–æ—Å–∫–æ–ø –∑–¥–æ—Ä–æ–≤—å—è',
  beauty: '–ì–æ—Ä–æ—Å–∫–æ–ø –∫—Ä–∞—Å–æ—Ç—ã',
  common: '–û–±—â–∏–π –≥–æ—Ä–æ—Å–∫–æ–ø',
};

const horoscopeResultStep = new Composer();

horoscopeResultStep.action(['love', 'business', 'health', 'beauty', 'common'], async (ctx) => {
  try {
    const chatID = ctx.update.callback_query.from.id;
    const selectedType = ctx.match[0];
    const selectedWeek = ctx.wizard.state.selectedWeek;
    const zodiacSignId = ctx.wizard.state.selectedZodiacSign.id;
    const Model = selectedWeek === 'curWeek' ? HoroscopeCurWeek : HoroscopePrevWeek;

    const horoscope = await Model.findOne({
      where: { zodiac_sign_id: zodiacSignId },
    });

    if (!horoscope || !horoscope[selectedType]) {
      await ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–æ—Ä–æ—Å–∫–æ–ø–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
      return ctx.scene.leave();
    }

    const horoscopeName = horoscopeTypes[selectedType];

    await ctx.replyWithHTML(
      `<b>${horoscopeName} –Ω–∞ ${ctx.wizard.state.dateRanges[selectedWeek]} –¥–ª—è –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞ - ${
        ctx.wizard.state.selectedZodiacSign.name
      } ${ctx.wizard.state.selectedZodiacSign.emoji || ''}:</b>\n\n${horoscope[selectedType]}`,
      Markup.inlineKeyboard([Markup.button.callback('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥–æ–π –∑–Ω–∞–∫', 'chooseAnotherSign')])
    );
    await UserModel.increment('horoscoperequestscount', { by: 1, where: { chatID } });
    // return ctx.scene.leave();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.');
    return ctx.scene.leave();
  }
});

horoscopeResultStep.action('chooseAnotherSign', async (ctx) => {
  await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞', {
    reply_markup: createZodiacSignsKeyboard(),
  });
  return ctx.wizard.selectStep(3); // –ù–æ–º–µ—Ä —à–∞–≥–∞, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞
});

const zodiacSignSelectionStep = new Composer();
zodiacSignSelectionStep.action(['–º—É–∂', '–∂–µ–Ω'], async (ctx) => {
  try {
    ctx.wizard.state.formData.gender = ctx.match[0];
    console.log(ctx.wizard.state.formData.gender);
    await ctx.reply('–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞', {
      reply_markup: createZodiacSignsKeyboard(),
    });
    return ctx.wizard.next();
  } catch (e) {
    console.log(e);
  }
});

const horoscopeStep = new Composer();

horoscopeStep.action(/(\d+)/, async (ctx) => {
  try {
    const zodiacSignId = parseInt(ctx.match[1], 10);
    const zodiacSign = await ZodiacSign.findByPk(zodiacSignId);
    const chatID = ctx.update.callback_query.from.id;

    const gender = ctx.wizard.state.formData.gender === '–º—É–∂' ? '–º—É–∂—á–∏–Ω—ã' : '–∂–µ–Ω—â–∏–Ω—ã';
    const zodiacSignNameInGenitive = getZodiacSignInGenitive(zodiacSign.name);
    const horoscope = await getHoroscope(zodiacSign.id, ctx.wizard.state.formData.gender);

    if (horoscope) {
      await ctx.replyWithHTML(
        `<b>–ì–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è ${gender} - ${zodiacSignNameInGenitive} ${
          zodiacSign.emoji || ''
        } –Ω–∞ 2024 –≥–æ–¥:</b>\n\n${horoscope.general}`
      );
    } else {
      await ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–æ—Ä–æ—Å–∫–æ–ø–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
    }
    await UserModel.increment('horoscoperequestscount', { by: 1, where: { chatID } });
    return ctx.scene.leave();
  } catch (e) {
    console.log(e);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.');
  }
});

module.exports = new Scenes.WizardScene(
  'threeWizard',
  startStep,
  typeSelectionStep,
  zodiacWeekSelectionStep,
  horoscopeTypeSelectionStep,
  horoscopeResultStep,
  zodiacSignSelectionStep,
  horoscopeStep
);
