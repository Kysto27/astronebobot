const { Markup, Scenes, Composer } = require('telegraf');
const { createZodiacSignsKeyboard } = require('../helpers/zodiacSignsKeyboard.js');
const { getZodiacSignInGenitive } = require('../helpers/zodiacSignInGenitive.js');
const { getHoroscope } = require('../helpers/getHoroscope.js');
const { ZodiacSign } = require('../../../models/index.js');
const UserModel = require('../../model/user.model.js');

const startStep = new Composer();

startStep.hears('–ì–æ—Ä–æ—Å–∫–æ–ø', enterStartStep);
startStep.command('horoscope', enterStartStep);

async function enterStartStep(ctx) {
  try {
    ctx.wizard.state.formData = {};
    await ctx.replyWithHTML(
      `<b>–ü—Ä–∏–≤–µ—Ç! –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –≥–æ–¥</b>üëáüëáüëá`,
      {
        reply_markup: {
          inline_keyboard: [[Markup.button.callback('–ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ 2024 –≥–æ–¥', 'horo24')]],
        },
      }
    );
    return ctx.wizard.next();
  } catch (e) {
    console.log(e);
  }
}

const genderSelectionStep = new Composer();
genderSelectionStep.action('horo24', async (ctx) => {
  try {
    await ctx.reply(
      '–í—ã–±–µ—Ä–∏—Ç–µ, –¥–ª—è –∫–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ 2024 –≥–æ–¥',
      Markup.inlineKeyboard([
        Markup.button.callback('–ú—É–∂—á–∏–Ω–∞', '–º—É–∂'),
        Markup.button.callback('–ñ–µ–Ω—â–∏–Ω–∞', '–∂–µ–Ω'),
      ])
    );
    return ctx.wizard.next();
  } catch (e) {
    console.log(e);
  }
});

// –≠—Ç–æ—Ç —à–∞–≥ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –≤—ã–±–æ—Ä –ø–æ–ª–∞ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞
const zodiacSignSelectionStep = new Composer();
zodiacSignSelectionStep.action(['–º—É–∂', '–∂–µ–Ω'], async (ctx) => {
  try {
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª–∞ –≤ state
    // ctx.wizard.state.formData.gender = ctx.match[0].split('_')[1];
    ctx.wizard.state.formData.gender = ctx.match[0];
    console.log(ctx.wizard.state.formData.gender);
    await ctx.reply('–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞', {
      reply_markup: createZodiacSignsKeyboard(),
    });
    return ctx.wizard.next();
  } catch (e) {
    console.log(e);
  }
});

const horoscopeStep = new Composer();

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞ –ø–æ —á–∏—Å–ª–æ–≤–æ–º—É –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É
horoscopeStep.action(/(\d+)/, async (ctx) => {
  try {
    const zodiacSignId = parseInt(ctx.match[1], 10);
    const zodiacSign = await ZodiacSign.findByPk(zodiacSignId);
    const chatID = ctx.update.callback_query.from.id;

    const gender = ctx.wizard.state.formData.gender === '–º—É–∂' ? '–º—É–∂—á–∏–Ω—ã' : '–∂–µ–Ω—â–∏–Ω—ã';
    const zodiacSignNameInGenitive = getZodiacSignInGenitive(zodiacSign.name);
    const horoscope = await getHoroscope(zodiacSign.id, ctx.wizard.state.formData.gender);
    
    if (horoscope) {
      await ctx.replyWithHTML(
        `<b>–ì–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è ${gender} - ${zodiacSignNameInGenitive} ${
          zodiacSign.emoji || ''
        } –Ω–∞ 2024 –≥–æ–¥:</b>\n\n${horoscope.general}`
      );
    } else {
      await ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–æ—Ä–æ—Å–∫–æ–ø–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
    }
    await UserModel.increment('horoscoperequestscount', { by: 1, where: { chatID } });
    return ctx.scene.leave();
  } catch (e) {
    console.log(e);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.');
  }
});

module.exports = new Scenes.WizardScene(
  'threeWizard',
  startStep,
  genderSelectionStep,
  zodiacSignSelectionStep,
  horoscopeStep
);
