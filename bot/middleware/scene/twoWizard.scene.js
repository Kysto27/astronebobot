const { Markup, Scenes, Composer } = require('telegraf');
const path = require('path');
const { TarotCard } = require('../../../models/index.js');
const Sequelize = require('sequelize');
const UserModel = require('../../model/user.model.js');
const checkUserSubscription = require('../helpers/subscriptionChecker');
const { promptSubscription } = require('../helpers/promptSubscription.js');
const { handleSubscription } = require('../helpers/sceneSubscription.js');


const startStep = new Composer();

// startStep.use(async (ctx, next) => {
//   const chatID = ctx.from.id;
//   const isSubscribed = await checkUserSubscription(ctx, '@nebo_prognoz');

//   if (!isSubscribed) {
//     await UserModel.update({ subscribeneboprognoz: false }, { where: { chatID } });
//     await promptSubscription(ctx);
//   } else {
//     await UserModel.update({ subscribeneboprognoz: true }, { where: { chatID } });
//     await enterStartStep(ctx);
//   }
// });

startStep.use(async (ctx, next) => {
  await handleSubscription(ctx, enterStartStep);
});

async function enterStartStep(ctx) {
  try {
    ctx.wizard.state.formData = {};
    await ctx.replyWithHTML(
      `<b>–ü—Ä–∏–≤–µ—Ç! üëã –Ø –≤–∞—à –¢–∞—Ä–æ-–±–æ—Ç</b> –∏ —É –º–µ–Ω—è –µ—Å—Ç—å —á–µ—Ç—ã—Ä–µ –≤–∏–¥–∞ —Ä–∞—Å–∫–ª–∞–¥–æ–≤ –¥–ª—è –≤–∞—Å:\n\n<b>1. "–î–∞ –∏–ª–∏ –ù–µ—Ç"</b> - –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä—è–º–æ–π –æ—Ç–≤–µ—Ç "–¥–∞" –∏–ª–∏ "–Ω–µ—Ç".\n<b>2. "–ß—Ç–æ –º–µ–Ω—è –æ–∂–∏–¥–∞–µ—Ç —Å–µ–≥–æ–¥–Ω—è"</b> - –ü–æ–ª—É—á–∏—Ç–µ –æ–±—â–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å.\n<b>3. "–ù–∞ –ª—é–±–æ–≤—å"</b> - –£–∑–Ω–∞–π—Ç–µ, —á—Ç–æ –∂–¥—ë—Ç –≤–∞—Å –≤ –ª–∏—á–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö.\n<b>4. "–§–∏–Ω–∞–Ω—Å—ã"</b> - –ü–æ–ª—É—á–∏—Ç–µ –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º –≤–æ–ø—Ä–æ—Å–∞–º.\n\n<b>–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –∏ —è –ø–æ–º–æ–≥—É –≤–∞–º —É–≤–∏–¥–µ—Ç—å, —á—Ç–æ –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞—é—Ç –∫–∞—Ä—Ç—ã!</b>üëáüëáüëá`,
      {
        reply_markup: {
          inline_keyboard: [
            [
              Markup.button.callback('–î–∞ –∏–ª–∏ –ù–µ—Ç', 'tarot_yes-no'),
              Markup.button.callback('–ß—Ç–æ –æ–∂–∏–¥–∞–µ—Ç —Å–µ–≥–æ–¥–Ω—è', 'tarot_expect'),
            ],
            [
              Markup.button.callback('–ù–∞ –ª—é–±–æ–≤—å', 'tarot_love'),
              Markup.button.callback('–§–∏–Ω–∞–Ω—Å—ã', 'tarot_finance'),
            ],
          ],
        },
      }
    );
    return ctx.wizard.next();
  } catch (e) {
    console.log(e);
  }
}

const chartSelection = new Composer();

chartSelection.action('tarot_yes-no', async (ctx) => {
  try {
    ctx.wizard.state.formData.choice = 'yes-no';
    const imagePath = path.join(__dirname, '../../middleware/data/images/tarot-card-deck.jpg');
    await ctx.replyWithPhoto({ source: imagePath });
    await ctx.replyWithHTML(
      `–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–∞—Å–∫–ª–∞–¥ <b>"–î–∞ –∏–ª–∏ –ù–µ—Ç"</b>. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å.\n\n–°—Ç–∞—Ä–∞–π—Ç–µ—Å—å —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ —Ç–∞–∫, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ "–¥–∞" –∏–ª–∏ "–Ω–µ—Ç".\n\n<b>–í–æ–∑—å–º–∏—Ç–µ –∫–∞—Ä—Ç—É –∏–∑ –∫–æ–ª–æ–¥—ã –∏ –ø–æ–ª—É—á–∏—Ç–µ –æ—Ç–≤–µ—Ç üëáüëáüëá</b>`,
      Markup.inlineKeyboard([Markup.button.callback('–í–∑—è—Ç—å –∫–∞—Ä—Ç—É', 'tarot_take-card-yes-no')])
    );
    return ctx.wizard.next();
  } catch (e) {
    console.log(e);
  }
});

chartSelection.action('tarot_expect', async (ctx) => {
  try {
    ctx.wizard.state.formData.choice = 'expect';
    const imagePath = path.join(__dirname, '../../middleware/data/images/tarot-card-deck.jpg');
    await ctx.replyWithPhoto({ source: imagePath });
    await ctx.replyWithHTML(
      `–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–∞—Å–∫–ª–∞–¥ <b>"–ß—Ç–æ –º–µ–Ω—è –æ–∂–∏–¥–∞–µ—Ç —Å–µ–≥–æ–¥–Ω—è"</b>.\n\n–î–ª—è —ç—Ç–æ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–∞ –≤–∞–º –Ω–µ –Ω—É–∂–Ω–æ –∑–∞–¥–∞–≤–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å. –í—ã—Ç—è–Ω–∏—Ç–µ –∫–∞—Ä—Ç—É, –∫–æ—Ç–æ—Ä–∞—è –¥–∞—Å—Ç –≤–∞–º –æ–±—â–µ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–æ–∏–∑–æ–π—Ç–∏ –≤ –≤–∞—à–µ–π –∂–∏–∑–Ω–∏ —Å–µ–≥–æ–¥–Ω—è. –ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å?\n\n<b>–í–æ–∑—å–º–∏—Ç–µ –∫–∞—Ä—Ç—É –∏–∑ –∫–æ–ª–æ–¥—ã –∏ –ø–æ–ª—É—á–∏—Ç–µ –æ—Ç–≤–µ—Ç üëáüëáüëá</b>`,
      Markup.inlineKeyboard([Markup.button.callback('–í–∑—è—Ç—å –∫–∞—Ä—Ç—É', 'tarot_take-card-expect')])
    );
    return ctx.wizard.next();
  } catch (e) {
    console.log(e);
  }
});

chartSelection.action('tarot_love', async (ctx) => {
  try {
    ctx.wizard.state.formData.choice = 'love';
    const imagePath = path.join(__dirname, '../../middleware/data/images/tarot-card-deck.jpg');
    await ctx.replyWithPhoto({ source: imagePath });
    await ctx.replyWithHTML(
      `–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–∞—Å–∫–ª–∞–¥ <b>"–ù–∞ –ª—é–±–æ–≤—å"</b>. –°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ —Å–≤–æ–µ–º –ª–∏—á–Ω–æ–º –≤–æ–ø—Ä–æ—Å–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–Ω–æ—à–µ–Ω–∏–π.\n\n<b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É –∏–∑ –∫–æ–ª–æ–¥—ã –∏ —É–∑–Ω–∞–π—Ç–µ, —á—Ç–æ –≤–∞—Å –∂–¥—ë—Ç –≤ –ª—é–±–≤–∏ üëáüëáüëá</b>`,
      Markup.inlineKeyboard([Markup.button.callback('–í–∑—è—Ç—å –∫–∞—Ä—Ç—É', 'tarot_take-card-love')])
    );
    return ctx.wizard.next();
  } catch (e) {
    console.log(e);
  }
});

chartSelection.action('tarot_finance', async (ctx) => {
  try {
    ctx.wizard.state.formData.choice = 'finance';
    const imagePath = path.join(__dirname, '../../middleware/data/images/tarot-card-deck.jpg');
    await ctx.replyWithPhoto({ source: imagePath });
    await ctx.replyWithHTML(
      `–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–∞—Å–∫–ª–∞–¥ <b>"–§–∏–Ω–∞–Ω—Å—ã"</b>. –°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ —Å–≤–æ–µ–º –≤–æ–ø—Ä–æ—Å–µ, —Å–≤—è–∑–∞–Ω–Ω–æ–º —Å —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏.\n\n<b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É –∏–∑ –∫–æ–ª–æ–¥—ã –∏ —É–∑–Ω–∞–π—Ç–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Å–≤–æ–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã üëáüëáüëá</b>`,
      Markup.inlineKeyboard([Markup.button.callback('–í–∑—è—Ç—å –∫–∞—Ä—Ç—É', 'tarot_take-card-finance')])
    );
    return ctx.wizard.next();
  } catch (e) {
    console.log(e);
  }
});

const interpretation = new Composer();
interpretation.action('tarot_take-card-yes-no', async (ctx) => {
  try {
    const chatID = ctx.update.callback_query.from.id;
    const randomCard = await TarotCard.findOne({
      order: Sequelize.literal('RANDOM()'),
    });
    if (randomCard) {
      const imagePath = path.join(
        __dirname,
        '../../middleware/data/images/taro/',
        randomCard.img_url
      );
      const description =
        ctx.wizard.state.formData.choice === 'yes-no'
          ? randomCard.yes_no
          : randomCard.what_to_expect;
      await ctx.replyWithPhoto({ source: imagePath });
      await ctx.replyWithHTML(`<b>${randomCard.name_ru}</b>\n\n${description}`);
    }
    await UserModel.increment('tarotrequestscount', { by: 1, where: { chatID } });
    return ctx.scene.leave();
  } catch (e) {
    console.log(e);
  }
});

interpretation.action('tarot_take-card-expect', async (ctx) => {
  try {
    const chatID = ctx.update.callback_query.from.id;
    const randomCard = await TarotCard.findOne({
      order: Sequelize.literal('RANDOM()'),
    });
    if (randomCard) {
      const imagePath = path.join(
        __dirname,
        '../../middleware/data/images/taro/',
        randomCard.img_url
      );
      const description =
        ctx.wizard.state.formData.choice === 'yes-no'
          ? randomCard.yes_no
          : randomCard.what_to_expect;
      await ctx.replyWithPhoto({ source: imagePath });
      await ctx.replyWithHTML(`<b>${randomCard.name_ru}</b>\n\n${description}`);
    }
    await UserModel.increment('tarotrequestscount', { by: 1, where: { chatID } });
    return ctx.scene.leave();
  } catch (e) {
    console.log(e);
  }
});

interpretation.action('tarot_take-card-love', async (ctx) => {
  try {
    const chatID = ctx.update.callback_query.from.id;
    const randomCard = await TarotCard.findOne({
      where: { love: { [Sequelize.Op.ne]: null } }, // –ò—Å–∫–ª—é—á–∞–µ–º –∫–∞—Ä—Ç—ã —Å –ø—É—Å—Ç—ã–º –ø—Ä–æ–≥–Ω–æ–∑–æ–º –¥–ª—è –ª—é–±–≤–∏
      order: Sequelize.literal('RANDOM()'),
    });
    if (randomCard) {
      const imagePath = path.join(
        __dirname,
        '../../middleware/data/images/taro/',
        randomCard.img_url
      );
      await ctx.replyWithPhoto({ source: imagePath });
      await ctx.replyWithHTML(`<b>${randomCard.name_ru}</b>\n\n${randomCard.love}`);
    }
    await UserModel.increment('tarotrequestscount', { by: 1, where: { chatID } });
    return ctx.scene.leave();
  } catch (e) {
    console.log(e);
  }
});

interpretation.action('tarot_take-card-finance', async (ctx) => {
  try {
    const chatID = ctx.update.callback_query.from.id;
    const randomCard = await TarotCard.findOne({
      where: { money: { [Sequelize.Op.ne]: null } }, // –ò—Å–∫–ª—é—á–∞–µ–º –∫–∞—Ä—Ç—ã —Å –ø—É—Å—Ç—ã–º –ø—Ä–æ–≥–Ω–æ–∑–æ–º –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤
      order: Sequelize.literal('RANDOM()'),
    });
    if (randomCard) {
      const imagePath = path.join(
        __dirname,
        '../../middleware/data/images/taro/',
        randomCard.img_url
      );
      await ctx.replyWithPhoto({ source: imagePath });
      await ctx.replyWithHTML(`<b>${randomCard.name_ru}</b>\n\n${randomCard.money}`);
    }
    await UserModel.increment('tarotrequestscount', { by: 1, where: { chatID } });
    return ctx.scene.leave();
  } catch (e) {
    console.log(e);
  }
});

module.exports = new Scenes.WizardScene(
  'twoWizard',
  startStep,
  chartSelection,
  interpretation
);
