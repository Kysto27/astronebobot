const bot = require('../../connection/token.connection');

const { Markup } = require('telegraf');
const checkUserSubscription = require('../helpers/subscriptionChecker');
const UserModel = require('../../model/user.model');

bot.action('check_subscription', async (ctx) => {
  const chatID = ctx.from.id;
  const isSubscribed = await checkUserSubscription(ctx, '@nebo_prognoz');
  if (isSubscribed) {
    // –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –∫–∞–Ω–∞–ª
    await UserModel.increment('channeljoincount', { by: 1, where: { chatID } });
    await UserModel.update({ subscribeneboprognoz: true }, { where: { chatID } });
    await ctx.reply('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!');
    await ctx.replyWithHTML(
      `–í—ã–±–∏—Ä–∞–π—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ <b>–ú–ï–ù–Æ</b> üëáüëáüëá`,
      Markup.keyboard([['–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å', '–†–∞—Å–∫–ª–∞–¥ –¢–ê–†–û'], ['–ì–æ—Ä–æ—Å–∫–æ–ø']])
        .oneTime()
        .resize()
    );
  } else {
    ctx.replyWithHTML(
      '–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª <a href="https://t.me/+i9IuUSCQB4lmZGVi">@nebo_prognoz</a>',
      Markup.inlineKeyboard([Markup.button.callback('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', 'check_subscription')])
    );
  }
});
