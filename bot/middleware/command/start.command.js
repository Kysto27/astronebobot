const { Markup } = require('telegraf');
const bot = require('../../connection/token.connection');
const db = require('../../connection/db.connection');
const UserModel = require('../../model/user.model');
const path = require('path');

module.exports = bot.start(async (ctx) => {
  try {
    await db.sync();

    const startPayload = ctx.startPayload;
    const chatID = String(ctx.chat.id);
    const firstName = ctx.chat.first_name ?? 'anon';
    const lastName = ctx.chat.last_name ?? 'anon2';
    const username = ctx.chat.username;

    console.log(`–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å chatID: ${chatID}`);
    const foundUser = await UserModel.findOne({ where: { chatID: ctx.chat.id } });

    if (foundUser) {
      console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å chatID: ${chatID} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.`);
      if (foundUser.username !== username) {
        console.log(`–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å chatID: ${chatID}`);
        await UserModel.update({ username }, { where: { chatID } });
      }
    } else {
      console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å chatID: ${chatID} –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.`);
      console.log(`–î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏:`, {
        chatID: chatID,
        firstName: firstName,
        lastName: lastName,
        username: username,
        admin: false,
        startPayload: startPayload,
      });

      await UserModel.create({
        chatID: chatID,
        firstName: firstName,
        lastName: lastName,
        username: username,
        admin: false,
        startPayload: startPayload,
      });

      console.log(`–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å chatID: ${chatID} —Å–æ–∑–¥–∞–Ω.`);

      const imagePath = path.join(__dirname, '../../middleware/data/images/start-picture.jpg');
      await ctx.replyWithPhoto(
        { source: imagePath },
        {
          caption: `<b>üåü–î–û–ë–†–û –ü–û–ñ–ê–õ–û–í–ê–¢–¨üåü</b>\n\n–ú—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –í–∞—Å –≤ –∞–≤—Ç–æ—Ä—Å–∫–æ–º —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–µ –∫–∞–Ω–∞–ª–∞ @nebo_prognoz, —Å –ø–æ–º–æ—â—å—é –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã –º–æ–∂–µ—Ç–µ:\n\nüîÆ –£–∑–Ω–∞—Ç—å —Å–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ 2024 –≥–æ–¥\n\nüë©‚Äç‚ù§Ô∏è‚Äçüë® –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø–∞—Ä—ã –ø–æ –∑–Ω–∞–∫—É –∑–æ–¥–∏–∞–∫–∞\n\n‚ô†Ô∏è –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å–∫–ª–∞–¥ –¢–ê–†–û`,
          parse_mode: 'HTML',
        }
      );
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    return await ctx.replyWithHTML(
      `–í—ã–±–∏—Ä–∞–π—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ <b>–ú–ï–ù–Æ</b> üëáüëáüëá`,
      Markup.keyboard([['–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å'], ['–†–∞—Å–∫–ª–∞–¥ –¢–ê–†–û']])
        .oneTime()
        .resize()
    );
  } catch (e) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã start:`, e);
  }
});
