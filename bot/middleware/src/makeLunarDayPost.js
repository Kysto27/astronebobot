require('dotenv').config();
const path = require('path');
const fs = require('fs');
const cron = require('node-cron');
const { LunarZodiacRecommendations, LunarDayAdvice } = require('../../../models/index.js');
const { sendTelegramMessage } = require('../helpers/sendTelegramMessage.js');

function formatDateToDDMMYYYY(date) {
  let day = date.getDate().toString();
  let month = (date.getMonth() + 1).toString();
  let year = date.getFullYear();
  day = day.length < 2 ? '0' + day : day;
  month = month.length < 2 ? '0' + month : month;

  return `${day}.${month}.${year}`;
}

function formatDateToFullDate(date) {
  const day = date.getDate();
  const monthNames = [
    '—è–Ω–≤–∞—Ä—è',
    '—Ñ–µ–≤—Ä–∞–ª—è',
    '–º–∞—Ä—Ç–∞',
    '–∞–ø—Ä–µ–ª—è',
    '–º–∞—è',
    '–∏—é–Ω—è',
    '–∏—é–ª—è',
    '–∞–≤–≥—É—Å—Ç–∞',
    '—Å–µ–Ω—Ç—è–±—Ä—è',
    '–æ–∫—Ç—è–±—Ä—è',
    '–Ω–æ—è–±—Ä—è',
    '–¥–µ–∫–∞–±—Ä—è',
  ];
  const month = monthNames[date.getMonth()];
  const year = date.getFullYear();

  return `${day} ${month} ${year} –≥–æ–¥–∞`;
}

function getTomorrow() {
  const today = new Date();
  const tomorrow = new Date(today);
  tomorrow.setDate(tomorrow.getDate() + 1); // –î–æ–±–∞–≤–ª—è–µ–º –æ–¥–∏–Ω –¥–µ–Ω—å –∫ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–µ
  return tomorrow;
}

function formatMoonPhase(moonPhase, moonPhaseStartTime) {
  const specialPhases = ['–ù–æ–≤–æ–ª—É–Ω–∏–µ', '1-—è –ª—É–Ω–Ω–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å', '–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ', '3-—è –ª—É–Ω–Ω–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å'];
  const emojis = {
    –ù–æ–≤–æ–ª—É–Ω–∏–µ: 'üåë –ù–æ–≤–æ–ª—É–Ω–∏–µ',
    '1-—è –ª—É–Ω–Ω–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å': 'üåì 1-—è –ª—É–Ω–Ω–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å',
    –ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ: 'üåï –ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ',
    '3-—è –ª—É–Ω–Ω–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å': 'üåó 3-—è –ª—É–Ω–Ω–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å',
    '–Æ–Ω–∞—è —Ä–∞—Å—Ç—É—â–∞—è –õ—É–Ω–∞': 'üåí –Æ–Ω–∞—è —Ä–∞—Å—Ç—É—â–∞—è –õ—É–Ω–∞',
    '–ú–æ–ª–æ–¥–∞—è —Ä–∞—Å—Ç—É—â–∞—è –õ—É–Ω–∞': 'üåí –ú–æ–ª–æ–¥–∞—è —Ä–∞—Å—Ç—É—â–∞—è –õ—É–Ω–∞',
    '–í–∑—Ä–æ—Å–ª–∞—è —É–±—ã–≤–∞—é—â–∞—è –õ—É–Ω–∞': 'üåñ –í–∑—Ä–æ—Å–ª–∞—è —É–±—ã–≤–∞—é—â–∞—è –õ—É–Ω–∞',
    '–°—Ç–∞—Ä–∞—è —É–±—ã–≤–∞—é—â–∞—è –õ—É–Ω–∞': 'üåñ –°—Ç–∞—Ä–∞—è —É–±—ã–≤–∞—é—â–∞—è –õ—É–Ω–∞',
  };

  if (specialPhases.includes(moonPhase) && moonPhaseStartTime) {
    return `${emojis[moonPhase]}, –Ω–∞—á–∞–ª–æ –≤ ${moonPhaseStartTime}`;
  } else {
    return emojis[moonPhase] || moonPhase;
  }
}

function formatZodiacSignWithEmoji(zodiacSign) {
  const zodiacEmojis = {
    –û–≤–µ–Ω: '‚ôàÔ∏è',
    –¢–µ–ª–µ—Ü: '‚ôâÔ∏è',
    –ë–ª–∏–∑–Ω–µ—Ü—ã: '‚ôäÔ∏è',
    –†–∞–∫: '‚ôãÔ∏è',
    –õ–µ–≤: '‚ôåÔ∏è',
    –î–µ–≤–∞: '‚ôçÔ∏è',
    –í–µ—Å—ã: '‚ôéÔ∏è',
    –°–∫–æ—Ä–ø–∏–æ–Ω: '‚ôèÔ∏è',
    –°—Ç—Ä–µ–ª–µ—Ü: '‚ôêÔ∏è',
    –ö–æ–∑–µ—Ä–æ–≥: '‚ôëÔ∏è',
    –í–æ–¥–æ–ª–µ–π: '‚ôíÔ∏è',
    –†—ã–±—ã: '‚ôìÔ∏è',
  };

  return `${zodiacSign} ${zodiacEmojis[zodiacSign] || ''}`;
}

async function getLunarDayAdvice(lunarDay) {
  if (!lunarDay) return { formattedHarmonyText: '', formattedAvoidText: '' };
  try {
    const advice = await LunarDayAdvice.findOne({
      where: { lunar_day: lunarDay },
    });

    return {
      formattedHarmonyText: advice ? advice.success_harmony.replace(/<br>/g, '\n') : '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
      formattedAvoidText: advice ? advice.avoid.replace(/<br>/g, '\n') : '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
    };
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–≤–µ—Ç–∞ –¥–ª—è –ª—É–Ω–Ω–æ–≥–æ –¥–Ω—è ${lunarDay}:`, error);
    return { formattedHarmonyText: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö', formattedAvoidText: '' };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–æ–≤
async function createTelegramPosts() {
  try {
    const tomorrow = getTomorrow();
    const formattedTomorrow = formatDateToDDMMYYYY(tomorrow);
    const formattedFullDate = formatDateToFullDate(tomorrow); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≤—Ç—Ä–∞—à–Ω—é—é –¥–∞—Ç—É –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–Ω–æ–π –¥–∞—Ç—ã

    const filePath = path.join(__dirname, '../data/files/lunar_calendar_2024.json');
    const data = JSON.parse(fs.readFileSync(filePath, 'utf8'));
    const tomorrowData = data[formattedTomorrow];

    if (!tomorrowData) {
      console.log('No data for tomorrow.');
      return;
    }

    if (!tomorrowData) {
      console.log('No data for today.');
      return;
    }

    const lunarDays = [
      tomorrowData.moonday_1,
      tomorrowData.moonday_2,
      tomorrowData.moonday_3,
    ].filter(Boolean);

    let lunarDaysStr = '';
    lunarDays.forEach((day, index) => {
      if (index === 0 && lunarDays.length === 1) {
        lunarDaysStr += `${day}-–π –ª—É–Ω–Ω—ã–π –¥–µ–Ω—å —Å 00:00 –¥–æ 24:00\n`;
      } else if (index === 0) {
        lunarDaysStr += `${day}-–π –ª—É–Ω–Ω—ã–π –¥–µ–Ω—å —Å 00:00 –¥–æ ${tomorrowData.moonday_change_time}\n`;
      } else {
        const startTime = index === 1 ? tomorrowData.moonday_change_time : '00:00';
        const endTime = index === lunarDays.length - 1 ? '24:00' : tomorrowData.moonday_change_time;
        lunarDaysStr += `${day}-–π –ª—É–Ω–Ω—ã–π –¥–µ–Ω—å —Å ${startTime} –¥–æ ${endTime}\n`;
      }
    });

    const moonPhaseFormatted = formatMoonPhase(
      tomorrowData.moon_phase,
      tomorrowData.moon_phase_start_time
    );
    const zodiacSignFormatted = formatZodiacSignWithEmoji(tomorrowData.moon_zodiac_sign);

    const lunarZodiacRecommendation = await LunarZodiacRecommendations.findOne({
      where: { zodiac_sign: tomorrowData.moon_zodiac_sign },
    });

    const advice1 = await getLunarDayAdvice(tomorrowData.moonday_1);
    const advice2 = await getLunarDayAdvice(tomorrowData.moonday_2);
    const advice3 = await getLunarDayAdvice(tomorrowData.moonday_3);

    const post1 =
      `üåù <b>–õ—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ ${formattedFullDate}</b>\n\n` +
      `${formattedFullDate} - —ç—Ç–æ:\n\n${lunarDaysStr}\n${moonPhaseFormatted}\n\n` +
      `–õ—É–Ω–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∑–Ω–∞–∫–µ –∑–æ–¥–∏–∞–∫–∞ - ${zodiacSignFormatted}\n\n` +
      `‚¨ÜÔ∏è–í–æ—Å—Ö–æ–¥: ${tomorrowData.moon_rise}  ‚¨áÔ∏è–ó–∞–∫–∞—Ç: ${tomorrowData.moon_set}\n\n` +
      `<b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ ${tomorrowData.moonday_1} –ª—É–Ω–Ω—ã–π –¥–µ–Ω—å:</b>\n\n` +
      `<b><i>–ß—Ç–æ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ —Å–µ–≥–æ–¥–Ω—è</i></b> ‚úÖ\n` +
      `${advice1.formattedHarmonyText}\n\n` +
      `<b><i>–ß–µ–≥–æ —Å—Ç–æ–∏—Ç –∏–∑–±–µ–≥–∞—Ç—å</i></b> ‚ùå\n` +
      `${advice1.formattedAvoidText}\n\n` +
      (tomorrowData.moonday_2
        ? `<b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ ${tomorrowData.moonday_2} –ª—É–Ω–Ω—ã–π –¥–µ–Ω—å:</b>\n\n` +
          `<b><i>–ß—Ç–æ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ —Å–µ–≥–æ–¥–Ω—è</i></b> ‚úÖ\n` +
          `${advice2.formattedHarmonyText}\n\n` +
          `<b><i>–ß–µ–≥–æ —Å—Ç–æ–∏—Ç –∏–∑–±–µ–≥–∞—Ç—å</i></b> ‚ùå\n` +
          `${advice2.formattedAvoidText}\n\n`
        : '') +
      (tomorrowData.moonday_3
        ? `<b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ ${tomorrowData.moonday_3} –ª—É–Ω–Ω—ã–π –¥–µ–Ω—å:</b>\n\n` +
          `<b><i>–ß—Ç–æ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ —Å–µ–≥–æ–¥–Ω—è</i></b> ‚úÖ\n` +
          `${advice3.formattedHarmonyText}\n\n` +
          `<b><i>–ß–µ–≥–æ —Å—Ç–æ–∏—Ç –∏–∑–±–µ–≥–∞—Ç—å</i></b> ‚ùå\n` +
          `${advice3.formattedAvoidText}\n\n`
        : '');

    // const post2 =
    //   `üåù<b>–õ—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ ${today}</b>\n\n` +
    //   `<b>–õ—É–Ω–∞ –≤ ${todayData.moon_zodiac_sign} ‚ôàÔ∏è</b>\n\n` +
    //   `${lunarZodiacRecommendation ? lunarZodiacRecommendation.description : '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}`;

    // console.log(post1);
    const groupId = process.env.LUNAR_CALEND_GROUP_CHATID;
    sendTelegramMessage(post1, 'HTML', groupId);
    // sendTelegramMessage(post2, 'HTML', groupId);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞:', error);
  }
}

const scheduleLunarDayPost = () => {
  cron.schedule('30 20 * * *', () => {
    // console.log('–ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏ createTelegramPosts() –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 19:00');
    createTelegramPosts().catch((error) =>
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ createTelegramPosts:', error)
    );
  });
};

module.exports = scheduleLunarDayPost;
